generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?   // Para autenticaci√≥n directa
  accounts      Account[]
  sessions      Session[]
  curriculums   Curriculum[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Curriculum {
  id          String   @id @default(cuid())
  name        String
  description String?
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  years       Year[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Year {
  id           String     @id @default(cuid())
  number       Int
  name         String
  curriculumId String
  curriculum   Curriculum @relation(fields: [curriculumId], references: [id], onDelete: Cascade)
  subjects     Subject[]
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@unique([curriculumId, number])
}

model Subject {
  id            String        @id @default(cuid())
  name          String
  code          String?
  credits       Int?
  approved      Boolean       @default(false)
  yearId        String
  year          Year          @relation(fields: [yearId], references: [id], onDelete: Cascade)
  prerequisites Prerequisite[] @relation("SubjectPrerequisites")
  dependents    Prerequisite[] @relation("PrerequisiteSubject")
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model Prerequisite {
  id                String  @id @default(cuid())
  subjectId         String
  prerequisiteId    String
  subject           Subject @relation("SubjectPrerequisites", fields: [subjectId], references: [id], onDelete: Cascade)
  prerequisiteSubject Subject @relation("PrerequisiteSubject", fields: [prerequisiteId], references: [id], onDelete: Cascade)

  @@unique([subjectId, prerequisiteId])
}
